format_version: 10
pipelines:
  build-{{ .Values.appName }}:
    group: injunweb
    environment_variables:
      HARBOR_URL: "admin-harbor.injunweb.com"
      GOCD_HARBOR_USER: "k8s-reader"
      GOCD_HARBOR_PASS: "{{`{{SECRET:[secret-password-id][GOCD_HARBOR_PASS]}}`}}"
      K8S_HARBOR_USER: "gocd-publisher"
      K8S_HARBOR_PASS: "{{`{{SECRET:[secret-password-id][K8S_HARBOR_PASS]}}`}}"
      GITHUB_USER: "in-jun"
      GITHUB_TOKEN: "{{`{{SECRET:[secret-password-id][GITHUB_TOKEN]}}`}}"

    label_template: "${git[:7]}"
    materials:
      git:
        git: "https://github.com/{{ .Values.userName }}/{{ .Values.appName }}.git"
        shallow_clone: false
        auto_update: true
        branch: "{{ .Values.branch }}"

    stages:
      - build:
          clean_workspace: true
          jobs:
            build:
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - -c
                      - |
                        VERSION=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
                        echo "Building Docker image from the app repository..."
                        docker build -t ${HARBOR_URL}/injunweb/{{ .Values.appName }}:$VERSION .

                        if [ $? -eq 0 ]; then
                          echo "Pushing Docker image to Harbor..."
                          docker login -u ${GOCD_HARBOR_USER} -p ${GOCD_HARBOR_PASS} ${HARBOR_URL}
                          docker push ${HARBOR_URL}/injunweb/{{ .Values.appName }}:$VERSION
                        else
                          echo "Docker build failed"
                          exit 1
                        fi

      - deploy:
          clean_workspace: true
          jobs:
            deploy:
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - -c
                      - |
                        echo "Cloning gitops repo and preparing Helm rendering..."
                        git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/injunweb/gitops-repo.git
                        cd gitops-repo

                        echo "Ensuring the directory exists for Helm output..."

                        echo "Rendering Helm templates with values file..."
                        helm template app ./templates/application --values ./pipelines/{{ .Values.appName }}/values.yaml --set imageTag=$VERSION > ./pipelines/{{ .Values.appName }}/manifests.yaml

                        echo "Committing rendered templates back to the repository..."
                        git config --global user.name "in-jun"
                        git config --global user.email "injuninjune@gmail.com"
                        git add ./pipelines/{{ .Values.appName }}/manifests.yaml
                        git commit -m "Updated Helm templates for {{ .Values.appName }} deployment with imageTag $VERSION"
                        git push https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/injunweb/gitops-repo.git

                        echo "Checking if namespace {{ .Values.appName }} exists..."
                        if ! kubectl get namespace {{ .Values.appName }}; then
                          echo "Namespace {{ .Values.appName }} does not exist, creating it..."
                          kubectl create namespace {{ .Values.appName }}
                        else
                          echo "Namespace {{ .Values.appName }} already exists."
                        fi

                        echo "Creating imagePullSecrets for Harbor..."
                        kubectl create secret docker-registry harbor-creds \
                          --docker-server=${HARBOR_URL} \
                          --docker-username=${K8S_HARBOR_USER} \
                          --docker-password=${K8S_HARBOR_PASS} \
                          --docker-email=k8s@k8s.com \
                          --namespace {{ .Values.appName }} || echo "Secret already exists"

                        echo "Patching the deployment with imagePullSecrets..."
                        kubectl patch deployment {{ .Values.appName }} -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"harbor-creds"}]}}}}' --namespace {{ .Values.appName }}

                        echo "Applying Helm-rendered templates to Kubernetes..."
                        kubectl apply -f ./pipelines/{{ .Values.appName }}/manifests.yaml --namespace {{ .Values.appName }}
