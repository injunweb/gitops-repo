apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-generator
  namespace: {{ $.Values.project }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-generator
  namespace: {{ $.Values.project }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-generator
  namespace: {{ $.Values.project }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-generator
subjects:
- kind: ServiceAccount
  name: secret-generator
  namespace: {{ $.Values.project }}
---
{{- range $db := .Values.databases }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $.Values.project }}-{{ $db.name }}-secret-generator
  namespace: {{ $.Values.project }}
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      containers:
      - name: generator
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "-c", "RAND=$(head -c 32 /dev/urandom | base64); if ! kubectl get secret {{ $.Values.project }}-{{ $db.name }}-secret -n {{ $.Values.project }} 2>/dev/null; then kubectl create secret generic {{ $.Values.project }}-{{ $db.name }}-secret --from-literal=password=$RAND --namespace={{ $.Values.project }}; fi"]
      serviceAccountName: secret-generator
      restartPolicy: OnFailure
{{- end }}