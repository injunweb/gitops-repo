{{- range $app := .Values.applications }}
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ $.Values.project }}-{{ $app.name }}-build-workflow-template
  namespace: {{ $.Values.project }}
spec:
  serviceAccountName: {{ $.Values.project }}-ci-workflow-sa
  entrypoint: build
  volumes:
    - name: docker-config
      secret:
        secretName: registry-secret
        items:
          - key: .dockerconfigjson
            path: config.json
    - name: workspace
      persistentVolumeClaim:
        claimName: {{ $.Values.project }}-{{ $app.name }}-workspace-pvc
  templates:
    - name: build
      dag:
        tasks:
          - name: clone
            template: git-clone
          - name: build
            template: build-container
            arguments:
              parameters:
                - name: sha
                  value: "{{`{{tasks.clone.outputs.parameters.sha}}`}}"
            dependencies: [clone]
          - name: update-config
            template: update-config
            dependencies: [build]
            arguments:
              parameters:
                - name: sha
                  value: "{{`{{tasks.clone.outputs.parameters.sha}}`}}"

    - name: git-clone
      outputs:
        parameters:
          - name: sha
            valueFrom:
              path: /workspace/sha.txt
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            echo "[GIT] Starting git process..."
            mkdir -p /workspace/source
            cd /workspace/source
            echo "[GIT] Current source directory contents:"
            ls -la
            if [ -d ".git" ]; then
              echo "[GIT] Repository exists, fetching updates..."
              git fetch origin HEAD
              git reset --hard FETCH_HEAD
            else
              echo "[GIT] Clean clone required..."
              rm -rf * .[!.]* 2>/dev/null || true
              git clone --depth 1 https://$(GIT_USERNAME):$(GIT_PASSWORD)@github.com/{{ $app.ghOwner }}/{{ $app.ghRepo }}.git .
            fi
            echo "[GIT] Repository contents after clone/update:"
            ls -la
            echo "[GIT] Dockerfile contents:"
            cat Dockerfile
            echo "[GIT] Getting commit SHA..."
            git rev-parse HEAD > /workspace/sha.txt
            echo "[GIT] Process completed with SHA:"
            cat /workspace/sha.txt
            # 컨테이너 내부 확인
            ls -la /workspace/cache
        env:
          - name: GIT_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: username
          - name: GIT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: token
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: build-container
      inputs:
        parameters:
          - name: sha
      hostAliases:
        - ip: "192.168.0.200"
          hostnames:
            - "harbor.injunweb.com"
      container:
        image: gcr.io/kaniko-project/executor:latest
        args:
          - "--context=/workspace/source"
          - "--dockerfile=/workspace/source/Dockerfile"
          - "--cache=true"
          - "--cache-dir=/workspace/cache"
          - "--snapshot-mode=full"
          - "--verbosity=info"
          - "--cleanup"
          - "--destination=harbor.injunweb.com/injunweb/{{ $.Values.project }}-{{ $app.name }}:{{`{{inputs.parameters.sha}}`}}"
          - "--destination=harbor.injunweb.com/injunweb/{{ $.Values.project }}-{{ $app.name }}:latest"
        volumeMounts:
          - name: docker-config
            mountPath: /kaniko/.docker/
          - name: workspace
            mountPath: /workspace

    - name: update-config
      inputs:
        parameters:
          - name: sha
      container:
        image: curlimages/curl:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "[CONFIG] Updating gitops repository..."
            curl -X POST https://api.github.com/repos/injunweb/projects-gitops/dispatches \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -d '{
                "event_type": "config-api",
                "client_payload": {
                  "path": "projects/{{$.Values.project}}/applications/{{$app.name}}",
                  "action": "apply",
                  "spec": {
                    "tag": "'"{{`{{inputs.parameters.sha}}`}}"'"
                  }
                }
              }'
        env:
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.project }}-github-access-secret
                key: token
{{- end }}
